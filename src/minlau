#!/usr/bin/env bash

[[ -z $XDG_CONFIG_HOME ]] && XDG_CONFIG_HOME=$HOME/.config
[[ -z $XDG_CACHE_HOME ]] && XDG_CACHE_HOME=$HOME/.cache
[[ -z $XDG_DATA_HOME ]] && XDG_DATA_HOME=$HOME/.local/share

[[ -z $MINLAU_CACHE ]] && MINLAU_CACHE=$XDG_CACHE_HOME/minlau && mkdir -p $MINLAU_CACHE

config_path=$XDG_CONFIG_HOME/minlau/config.ini
if [[ ! -f $config_path ]]; then
	mkdir -P $(sed 's/\/config.ini//' <<< "$config_path") 
	touch $config_path
fi


help_message(){
	echo -en "$1\n" \
	"\t--help \t\t\t\tDisplay this message\n" \
	"\t--list-games \t\t\tList games in config.ini\n" \
	"\t--create-prefix <GAME> \t\tCreate a prefix if there isn't already one\n" \
	"\t--launch <GAME> \t\tLaunch game\n" \
	"\t--install-dxvk <GAME> \t\tInstall dxvk on prefix\n" \
	"\t--uninstall-dxvk <GAME> \tUninstall dxvk on prefix\n" \
	"\t--winecfg <GAME> \t\tOpen winecfg on prefix\n"\
	"\t--winetricks <GAME> \t\tOpen winetricks on prefix\n"\
	"\t--download_wine <VERSION> \tDownload and install wine\n" \
	"\t--download_dxvk <VERSION> \tDownload and install dxvk\n" 
}


get_config(){
	config="$(awk "/\[$1\]/ {p=1;next}p" $config_path | sed 's/;.*//g; s/#.*//g')"
	if [[ "$config" == '' ]]; then 
		help_message "Game not found or config not set up properly" >&2
		exit
	fi

	next_block=$(grep -m1 "\[" <<< "$config")
	if [[ "$next_block" == [* ]]; then
		next_block=$(sed 's/\[/\\\[/; s/\]/\\\]/' <<< "$next_block")
		var="$(echo "$config" | sed "/$next_block/q" | \
			sed "s/$next_block.*//; /^$/d; s/^/export /")"
	else
		var="$(sed '/^$/d; s/^/export /' <<< "$config")"
	fi
	eval "$var"
}


# create native dll override (stole from dxvk installation)
overrideDll() {
	$WINE reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v $1 /d native /f >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "Failed to add override for $1" >&2
		exit 1
	fi
}


# remove dll override (stole from dxvk installation)
restoreDll() {
  $WINE reg delete 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v $1 /f > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Failed to remove override for $1" >&2
  fi
}


install_dxvk(){
	dll=$1
	system_dll_path=$2
	arch=$3
	if [[ -L "$system_dll_path/$dll" ]]; then
		dll_orig_path=$(readlink -f "$system_dll_path/$dll" | sed 's/\/x.*//')
		if [[ $dll_orig_path != $DXVK_PATH ]];then
			echo "Updating $dll $arch to ${DXVK_PATH##*/}"
			ln -sfn "$DXVK_PATH/$arch/$dll" $system_dll_path
			overrideDll ${dll%%.*}
		else
			echo "$dll $arch already up to date"
		fi

	else
		echo "Installing $dll $arch ${DXVK_PATH##*/}"
		[[ -f "$system_dll_path/$dll" ]] && \
		mv -f "$system_dll_path/$dll" "$system_dll_path/$dll.orig"
		ln -sfn "$DXVK_PATH/$arch/$dll" $system_dll_path
		overrideDll ${dll%%.*}
	fi
}


uninstall_dxvk(){
	dll=$1
	system_dll_path=$2
	arch=$3
	if [[ -L "$system_dll_path/$dll" ]]; then
		echo "Restoring $dll $arch"
		rm "$system_dll_path/$dll"
		[[ -f "$system_dll_path/$dll.orig" ]] && \
			mv -f "$system_dll_path/$dll.orig" "$system_dll_path/$dll"
		[[ $arch = 'x64' ]] && restoreDll ${dll%%.*}
	fi
}

sandbox(){
	#a=("Desktop" "Personal" "My Pictures" "My music" "My Videos" \
		#"Downloads" "Templates")
	[[ -d $WINEPREFIX/drive_c/users/$USER ]] && user=$USER || user="steamuser"
	readarray -t dirs <<< "$(ls $WINEPREFIX/drive_c/users/$USER)"
	for dir in "${dirs[@]}"; do
		if [[ -L "$WINEPREFIX/drive_c/users/$USER/$dir" ]]; then
			unlink "$WINEPREFIX/drive_c/users/$USER/$dir"
			mkdir "$WINEPREFIX/drive_c/users/$USER/$dir"
		fi
	done
}


download_dxvk(){
	url_lutris="https://api.github.com/repos/lutris/dxvk/releases"
	url_doitsujin="https://api.github.com/repos/doitsujin/dxvk/releases"
	jason="$(curl --silent "$url_lutris") $(curl --silent "$url_doitsujin")"
	ver=$(echo "$jason" | grep "tag_name" | sed 's/.* //g; s/"//g; s/,//g')
	echo $ver | sed 's/ /\n/g' > $MINLAU_CACHE/dxvk.ver
	[[ "$1" = "--update-database" ]] && return

	for dxvk_ver in $(cat $MINLAU_CACHE/dxvk.ver);do
		[[ "$1" = "$dxvk_ver" ]] && exist=1 && break
	done
	[[ -z $exist ]] && echo "Build not found" >&2 && exit

	ver="$(sed 's/v//' <<< "$1")"

	link=$(echo "$jason"|grep "download_ur.*$ver\.t"|sed 's/.* //g; s/"//g; s/,//g')
	[[ "$link" == '' ]] && echo "Build not found" >&2 && exit

	[[ -z $DXVK_INSTALL ]] && DXVK_INSTALL=$XDG_DATA_HOME/minlau/dxvk
	mkdir -p $DXVK_INSTALL

	wget --continue -P  $MINLAU_CACHE $link
	tar -xf $MINLAU_CACHE/${link##*/} -C $DXVK_INSTALL
}


download_wine(){
	lutris_url="https://lutris.net/api/runners?format=json&search=wine"
	tkg_url="https://api.github.com/repos/Frogging-Family/wine-tkg-git/releases"
	lutris_wine="$(curl --silent "$lutris_url")"
	tkg_wine="$(curl --silent "$tkg_url")"

	# get lutris wine build name
	lutris_ver=$(echo "$lutris_wine" | sed 's/{/\n/g' | \
		sed 's/,.*/ /g; s/.*://g; s/"//g'|	tail -n +4)

	# get wine-tkg build name
	tgk_ver=$(echo "$tkg_wine" | grep "name.*wine.*pkg" | \
		sed 's/.*wine-//; s/"//g; s/\.r.*//;')

	echo "$lutris_ver" | tac > $MINLAU_CACHE/wine.ver
	echo "$tgk_ver" >> $MINLAU_CACHE/wine.ver

	[[ "$1" = "--update-database" ]] && return

	# check if build exists
	for i in $(cat $MINLAU_CACHE/wine.ver);do
		[[ "$1" = "$i" ]] && exist=1 && break
	done
	[[ -z $exist ]] && echo "Build not found" >&2 && exit

	ver=$1

	link_tkg=$(echo "$tkg_wine" | grep "download_url.*$ver\." |\
		sed 's/.* //; s/"//g')

	[[ -z $link_tkg ]] && \
	link_lutris=$(echo "$lutris_wine" | sed 's/{/\n/g' |\
		grep $ver | sed 's/.*url":"//g; s/".*//g')

	if [[ "$link_tkg" != "" ]]; then
		link=$link_tkg 
	elif [[ "$link_lutris" != "" ]]; then
		link=$link_lutris
	else
		echo "Build not found" >&2
	fi

	[[ -z $WINE_INSTALL ]] && WINE_INSTALL=$XDG_DATA_HOME/minlau/wine
	mkdir -p $WINE_INSTALL

	wget --continue -P $MINLAU_CACHE $link
	tar -xf $MINLAU_CACHE/${link##*/} -C $WINE_INSTALL
}


if [[ $# = 0 || $1 = '--help' ]]; then
	help_message "Available commands"
	exit
fi

if [[ "$1" == '--list-games' ]]; then
	echo $(grep '\[' $config_path | sed 's/\[//g; s/\]//g' | tail -n +2)
	exit
fi

get_config 'global'

if [[ $1 = '--clear-cache' ]]; then 
	read -p "Are you sure you want to delete all the cached files? [y/n] " answer
	[[ $answer = 'y' ]] && rm -r $MINLAU_CACHE && echo "Done"
	exit
fi

if [[ $1 = --download-* ]]; then
	[[ -z $2 ]] && echo "No ${1##*-} build provided" >&2 && exit

	if [[ "$2" = "--list" ]]; then
		[[ ! -f $MINLAU_CACHE/${1##*-}.ver ]] && download_${1##*-} --update-database 
		cat $MINLAU_CACHE/${1##*-}.ver 2> /dev/null | column
		exit
	fi
	download_${1##*-} $2 
	[[ "$2" = "--update-database" ]] && exit
	exit
fi

if [[ -z $2 ]]; then
	echo "No game name provided" >&2 
	exit
fi

get_config $2

[[ -z $WINEARCH ]] && export WINEARCH=win64

case $1 in
	"--launch")
		launch=1
		;;
	"--install-dxvk")
		AUTO_DXVK=1
		DXVK=1
		;;
	"--uninstall-dxvk")
		AUTO_DXVK=1
		DXVK=0
		;;
	"--winecfg") # open winecfg and exit
		$WINE winecfg
		exit
		;;
	"--winetricks")
		WINETRICKS=$(which winetricks) && $WINETRICKS
		exit
		;;
	"--regedit")
		$WINE regedit
		exit
		;;
	"--create-prefix")
		;;
	"--delete-prefix")
		read -p "Are you sure you want to delete $2 prefix? [y/n] " answer
		[[ $answer = 'y' ]] && rm -r $WINEPREFIX && echo "Done"
		exit
		;;
	*)
		help_message "Not a valid command, here are the right ones:" >&2
		exit
		;;
esac

# create prefix when there's none
if [[ $WINEPREFIX != '' && ! -f $WINEPREFIX/system.reg ]]; then
	echo "Prefix not found, creating a new one"
	mkdir -p "$WINEPREFIX" 
	$WINE wineboot -u
fi

[[ $SANDBOX = 1 ]] && sandbox
[[ $WINETRICKS_SANDBOX = 1 ]] && WINETRICKS=$(which winetricks) && $WINETRICKS sandbox

# (un)install dxvk
if [[ $AUTO_DXVK = 1 ]]; then
	[[ $DXVK = 1 ]] && action="install_dxvk" || action="uninstall_dxvk" 

	[[ -z $DXVK_DLLS ]] && \
		DXVK_DLLS=$(ls "$DXVK_PATH/$(sed 's/win/x/' <<< $WINEARCH)" | grep dll)

	wine_path=$(dirname $WINE)
	[[ -f $wine_path/wine ]] && \
		win32_path=$($wine_path/wine winepath -u 'C:\windows\system32')
	win64_path=$($wine_path/wine64 winepath -u 'C:\windows\system32')

	for dll in $DXVK_DLLS; do
		[[ -z $win32_path ]] || $action $dll "$win32_path" x32
		$action $dll "$win64_path" x64
	done
fi

if [[ $launch = 1 ]]; then
	[[ -z $DXVK_LOG_PATH ]] && export DXVK_LOG_PATH=$WINEPREFIX
	[[ -z $WORKING_DIR ]] && WORKING_DIR="$(dirname "$LAUNCH")"
	cd "$WORKING_DIR"

	if [[ $DISABLE_SCREEN_SAVER = 1 ]]; then
		xset_time=$(xset q | awk '/timeout/ {print $2}')
		xset s off
	fi

	if [[ $GAMEMODE = 1 ]]; then
		gamemoderun "$WINE" "$LAUNCH" "$ARGS"
	else
		"$WINE" "$LAUNCH" "$ARGS"
	fi
	[[ $KILL != '' ]] && killall $KILL
	[[ $DISABLE_SCREEN_SAVER = 1 ]] && xset s $xset_time
fi


